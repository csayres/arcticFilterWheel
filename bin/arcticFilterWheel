#!/bin/bash

if test -z $ARCTICFILTERWHEEL_DIR; then
    echo "The arcticFilterWheel is not setup" >&1
    exit 1
fi

echo
echo ====================== Using arcticFilterWheel in $ARCTICFILTERWHEEL_DIR='/home/arctic/code/arcticFilterWheel'
echo

usage() {
    echo "usage: $0 start|stop|restart|status" >&2
    exit 1
}

if test $# != 1; then
    usage
fi
cmd=$1

# Return the actor's pid, or the empty string.
#
get_pid() {
    PID=""
    pid=`/bin/ps -e -ww -o pid,user,command | egrep -v 'awk|grep' | grep 'runArcticFilterWheel.py' | awk '{print $1}'`
    PID=$pid
    
    if test "$pid"; then
        echo "arcticFilterWheel is running on port 37000 as process $pid"
    else
        echo "arcticFilterWheel is not running"
    fi
}

# Start a new actor. Complain if the actor is already running,  and do not start a new one.
#
do_start() {
    get_pid
    
    if test "$PID"; then
        echo "NOT starting new arcticFilterWheel. Use restart if you want a new one."
        return
    fi
    
    echo "Starting new arcticFilterWheel..."

    # run the actor, as follows:
    # disable buffering of stdout using "stdbuf -o0"
    # redirect stdout to logger at priority "warning" and stderr at priority "error"
    {
        stdbuf -o0 runArcticFilterWheel.py 2>&3 | logger -p local1.warning
    } 3>&1 | logger -p local1.error &
    
    # Check that it really started...
    #
    sleep 1
    get_pid

    if test "$PID"; then
        echo " done."
    else
        echo " FAILED!"
    fi
}

# Stop any running actor. 
#
do_stop() {
    get_pid
    
    if test ! "$PID"; then
        return
    fi
    
    echo "Stopping arcticFilterWheel."
    kill -TERM $PID
}

# Stop any running actor fairly violently. 
#
do_stopdead() {
    get_pid
    
    if test ! "$PID"; then
        return
    fi
    
    echo "Stopping arcticFilterWheel gently."
    kill -TERM $PID
    sleep 2

    echo "Stopping arcticFilterWheel meanly."
    kill -KILL $PID
}

case $cmd in
    start) 
        do_start
        ;;
    stop)
        do_stop
        ;;
    stopdead)
        do_stopdead
        ;;
    status)
        # Check whether the actor is running
        get_pid
        ;;
    restart)
        do_stop
        sleep 2
        do_start                
        ;;
    *)
        usage
        ;;
esac

exit 0

